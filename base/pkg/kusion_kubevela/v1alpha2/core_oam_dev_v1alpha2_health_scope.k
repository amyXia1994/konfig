"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import base.pkg.kusion_kubernetes.apimachinery.apis


schema HealthScope:
    """ A HealthScope determines an aggregate health status based of the health of components.

    Attributes
    ----------
    apiVersion : str, default is "core.oam.dev/v1alpha2", required
         APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "HealthScope", required
         Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : apis.ObjectMeta, default is Undefined, optional
        metadata
    spec : CoreOamDevV1alpha2HealthScopeSpec, default is Undefined, optional
        spec
    status : CoreOamDevV1alpha2HealthScopeStatus, default is Undefined, optional
        status
    """


    

    apiVersion: "core.oam.dev/v1alpha2" = "core.oam.dev/v1alpha2"

    kind: "HealthScope" = "HealthScope"

    metadata?: apis.ObjectMeta

    spec?: CoreOamDevV1alpha2HealthScopeSpec

    status?: CoreOamDevV1alpha2HealthScopeStatus


schema CoreOamDevV1alpha2HealthScopeSpec:
    """ A HealthScopeSpec defines the desired state of a HealthScope.

    Attributes
    ----------
    appReferences : [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0], default is Undefined, optional
         AppRefs records references of applications' components
    probe-interval : int, default is Undefined, optional
         ProbeInterval is the amount of time in seconds between probing tries.
    probe-timeout : int, default is Undefined, optional
         ProbeTimeout is the amount of time in seconds to wait when receiving a response before marked failure.
    workloadRefs : [CoreOamDevV1alpha2HealthScopeSpecWorkloadRefsItems0], default is Undefined, required
         WorkloadReferences to the workloads that are in this scope.
    """


    appReferences?: [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0]

    probe_interval?: int

    probe_timeout?: int

    workloadRefs: [CoreOamDevV1alpha2HealthScopeSpecWorkloadRefsItems0]


schema CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0:
    """ AppReference records references of an application's components

    Attributes
    ----------
    appName : str, default is Undefined, optional
        app name
    compReferences : [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0], default is Undefined, optional
        comp references
    """


    appName?: str

    compReferences?: [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0]


schema CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0:
    """ CompReference records references of a component's resources

    Attributes
    ----------
    compName : str, default is Undefined, optional
        comp name
    traits : [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0TraitsItems0], default is Undefined, optional
        traits
    workload : CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0Workload, default is Undefined, optional
        workload
    """


    compName?: str

    traits?: [CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0TraitsItems0]

    workload?: CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0Workload


schema CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0TraitsItems0:
    """ ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
         API version of the referent.
    fieldPath : str, default is Undefined, optional
         If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
         Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
         Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
         Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
         Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
         UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema CoreOamDevV1alpha2HealthScopeSpecAppReferencesItems0CompReferencesItems0Workload:
    """ ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
         API version of the referent.
    fieldPath : str, default is Undefined, optional
         If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
         Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
         Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
         Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
         Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
         UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema CoreOamDevV1alpha2HealthScopeSpecWorkloadRefsItems0:
    """ ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
         API version of the referent.
    fieldPath : str, default is Undefined, optional
         If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
         Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
         Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
         Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
         Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
         UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema CoreOamDevV1alpha2HealthScopeStatus:
    """ A HealthScopeStatus represents the observed state of a HealthScope.

    Attributes
    ----------
    appHealthConditions : [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0], default is Undefined, optional
         AppHealthConditions represents health condition of applications in the scope
    conditions : [CoreOamDevV1alpha2HealthScopeStatusConditionsItems0], default is Undefined, optional
         Conditions of the resource.
    healthConditions : [CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0], default is Undefined, optional
         WorkloadHealthConditions represents health condition of workloads in the scope Use AppHealthConditions to provide app level status
    scopeHealthCondition : CoreOamDevV1alpha2HealthScopeStatusScopeHealthCondition, default is Undefined, required
        scope health condition
    """


    appHealthConditions?: [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0]

    conditions?: [CoreOamDevV1alpha2HealthScopeStatusConditionsItems0]

    healthConditions?: [CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0]

    scopeHealthCondition: CoreOamDevV1alpha2HealthScopeStatusScopeHealthCondition


schema CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0:
    """ AppHealthCondition represents health condition of an application

    Attributes
    ----------
    appName : str, default is Undefined, required
        app name
    components : [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0], default is Undefined, optional
        components
    envName : str, default is Undefined, optional
        env name
    """


    appName: str

    components?: [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0]

    envName?: str


schema CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0:
    """ WorkloadHealthCondition represents informative health condition of a workload.

    Attributes
    ----------
    componentName : str, default is Undefined, optional
         ComponentName represents the component name if target is a workload
    customStatusMsg : str, default is Undefined, optional
        custom status msg
    diagnosis : str, default is Undefined, optional
        diagnosis
    healthStatus : str, default is Undefined, required
         HealthStatus represents health status strings.
    targetWorkload : CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TargetWorkload, default is Undefined, optional
        target workload
    traits : [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TraitsItems0], default is Undefined, optional
        traits
    workloadStatus : str, default is Undefined, optional
         WorkloadStatus represents status of workloads whose HealthStatus is UNKNOWN.
    """


    componentName?: str

    customStatusMsg?: str

    diagnosis?: str

    healthStatus: str

    targetWorkload?: CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TargetWorkload

    traits?: [CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TraitsItems0]

    workloadStatus?: str


schema CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TargetWorkload:
    """ ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
         API version of the referent.
    fieldPath : str, default is Undefined, optional
         If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
         Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
         Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
         Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
         Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
         UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema CoreOamDevV1alpha2HealthScopeStatusAppHealthConditionsItems0ComponentsItems0TraitsItems0:
    """ TraitHealthCondition represents informative health condition of a trait.

    Attributes
    ----------
    customStatusMsg : str, default is Undefined, optional
        custom status msg
    diagnosis : str, default is Undefined, optional
        diagnosis
    healthStatus : str, default is Undefined, required
         HealthStatus represents health status strings.
    resource : str, default is Undefined, required
        resource
    $type : str, default is Undefined, required
        type
    """


    customStatusMsg?: str

    diagnosis?: str

    healthStatus: str

    resource: str

    $type: str


schema CoreOamDevV1alpha2HealthScopeStatusConditionsItems0:
    """ A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
         LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
         A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
         A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
         Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
         Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


schema CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0:
    """ WorkloadHealthCondition represents informative health condition of a workload.

    Attributes
    ----------
    componentName : str, default is Undefined, optional
         ComponentName represents the component name if target is a workload
    customStatusMsg : str, default is Undefined, optional
        custom status msg
    diagnosis : str, default is Undefined, optional
        diagnosis
    healthStatus : str, default is Undefined, required
         HealthStatus represents health status strings.
    targetWorkload : CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TargetWorkload, default is Undefined, optional
        target workload
    traits : [CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TraitsItems0], default is Undefined, optional
        traits
    workloadStatus : str, default is Undefined, optional
         WorkloadStatus represents status of workloads whose HealthStatus is UNKNOWN.
    """


    componentName?: str

    customStatusMsg?: str

    diagnosis?: str

    healthStatus: str

    targetWorkload?: CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TargetWorkload

    traits?: [CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TraitsItems0]

    workloadStatus?: str


schema CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TargetWorkload:
    """ ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
         API version of the referent.
    fieldPath : str, default is Undefined, optional
         If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
         Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
         Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
         Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
         Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
         UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema CoreOamDevV1alpha2HealthScopeStatusHealthConditionsItems0TraitsItems0:
    """ TraitHealthCondition represents informative health condition of a trait.

    Attributes
    ----------
    customStatusMsg : str, default is Undefined, optional
        custom status msg
    diagnosis : str, default is Undefined, optional
        diagnosis
    healthStatus : str, default is Undefined, required
         HealthStatus represents health status strings.
    resource : str, default is Undefined, required
        resource
    $type : str, default is Undefined, required
        type
    """


    customStatusMsg?: str

    diagnosis?: str

    healthStatus: str

    resource: str

    $type: str


schema CoreOamDevV1alpha2HealthScopeStatusScopeHealthCondition:
    """ ScopeHealthCondition represents health condition summary of the scope

    Attributes
    ----------
    healthStatus : str, default is Undefined, required
         HealthStatus represents health status strings.
    healthyWorkloads : int, default is Undefined, optional
        healthy workloads
    total : int, default is Undefined, optional
        total
    unhealthyWorkloads : int, default is Undefined, optional
        unhealthy workloads
    unknownWorkloads : int, default is Undefined, optional
        unknown workloads
    """


    healthStatus: str

    healthyWorkloads?: int

    total?: int

    unhealthyWorkloads?: int

    unknownWorkloads?: int


